#!/bin/sh
# reveal-init - Reveal.js slide deck initiator
#
# Written by Nguyen Hoang Duong (@you-create)
#
# This is free and unencumbered software released into the public domain.
# For more information, please refer to <http://unlicense.org/>

# === MAIN VARIABLES ===

dirname=""    # Project directory of the slide deck
title=""      # Title of the presentation (which goes into <title></title>)
theme="-"     # Theme for the slide deck
plugins="-"   # List of plugins (separated by \n)
n_slide=0     # Number of empty non-vertical slides to create
git=0         # Initiate a Git repository? (0 = false, true otherwise)
libfiles="*"  # Paths of files in REVEAL_PATH/lib (relative) to copy and import
              # (separated by \n)

n_err=0       # Number of errors
verbose=0     # Be verbose? (0 = no, otherwise yes)
logfile=""    # Path to log file

# ======================

# === PROGRAM'S VARIABLES ===
# These values remain constant throughout the program

VERSION="3.0"  # reveal-init's version
t="    "  # Tab

# ===========================

# === ALIASES ===
# These aliases are created to avoid security risks. If you think they are
# causing problems, remove the alias command invocation (also unalias at the
# near end of the file).

alias printf="/usr/bin/printf" echo="/usr/bin/echo" rm="/usr/bin/rm" \
      cp="/usr/bin/cp" ls="/usr/bin/ls" mkdir="/usr/bin/mkdir" \
      touch="/usr/bin/touch" command="/usr/bin/command" tee="/usr/bin/tee" \
      wc="/usr/bin/wc" readlink="/usr/bin/readlink" sort="/usr/bin/sort" \
      grep="/usr/bin/grep"

# ===============

# A simple function for logging. Requires at least 2 parameters
#     $1: Log message
#     $2: Severity of the event being logged
#     $3: Put a message to remind the user that log messages are kept in
#         $logfile (only touched if $2 is "3" or "fatal")
#     $4: A custom ANSI escape code to modify the color
#
# Valid values for the second parameter are:
#    0, info        No severity, everything is working as expected.
#    1, warn        Mild severity, something is wrong but can be easily manually
#                   fixed later.
#    2, err, error  High severity, something is wrong and can hardly be fixed.
#    3, fatal       Extreme severity, the program cannot further work.
#
# Valid values for the fourth parameter have the following format: X;3Y
# ...where X can be 0, 1, or 4, and Y can be anywhere in between 0 and 7.
#
# By design, any other value for the second parameter is treated as "info".
# This means for the severity of 'info', the second parameter may be omitted.
function log() {
    nc='\033[0m'
    color=$(echo "$4" | grep -oP '^[014];3[0-7]$')

    case $2 in
        "1" | "warn")
            [ -z "$color" ] && color='1;33'
            printf '\033['"$color"'m'"WARNING$nc $1\n" | tee -a "$logfile"
            ;;
        "2" | "err" | "error")
            [ -z "$color" ] && color='1;31'
            printf '\033['"$color"'m'"ERROR  $nc $1\n" | tee -a "$logfile"
            n_err=$(( $n_err + 1 ))
            ;;
        "3" | "fatal")
            [ -z "$color" ] && color='1;31'
            printf '\033['"$color"'m'"FATAL  $nc $1\n" | tee -a "$logfile"
            [[ $3 -ne 0 ]] && printf "Log messages can be found in $logfile\n" \
                           || rm -f "$logfile"
            exit 1
            ;;
        *)
            [ -z "$color" ] && color='' || color='\033['"$color"'m'
            printf "$color""INFO$nc    $1\n" >> "$logfile"
            [[ $verbose != "0" ]] && printf "$color""INFO$nc    $1\n"
            ;;
    esac

    return 0
}


# This function checks if REVEAL_PATH is valid as a Reveal.js repository
# to begin with
function check_reveal_path() {
    # Must include:
    #   - $REVEAL_PATH/css/reveal.css
    #   - $REVEAL_PATH/js/reveal.js
    #
    # Warn if absent:
    #   - $REVEAL_PATH/css/theme          (no theme)
    #   - $REVEAL_PATH/lib/js/head.min.js (no plugin)
    #   - $REVEAL_PATH/plugin             (no plugin)

    log "Checking REVEAL_PATH ($(readlink -f $REVEAL_PATH))..."

    ! [ -d "$REVEAL_PATH" ] && log "REVEAL_PATH ($REVEAL_PATH) not found" 3

    ! [ -f "$REVEAL_PATH/css/reveal.css" ] && log "\$REVEAL_PATH/css/reveal.css not found" 2
    ! [ -d "$REVEAL_PATH/css/theme" ] || [[ -z "$(ls -A $REVEAL_PATH/css/theme)" ]] && \
        log "No theme found" 1 && theme="-"

    ! [ -f "$REVEAL_PATH/js/reveal.js" ] && log "\$REVEAL_PATH/js/reveal.js not found" 2

    ! [ -f "$REVEAL_PATH/lib/js/head.min.js" ] && \
        log "\$REVEAL_PATH/lib/js/head.min.js not found, plugins won't be loaded" 1 && \
        plugins="-"

    ! [ -d "$REVEAL_PATH/plugin" ] || [[ -z "$(ls -A $REVEAL_PATH/plugin)" ]] && \
        log "No plugin found" 1 && plugins="-"
}


# ===========================


# === GENERIC OPTIONS ===

case "$1" in
    "-h" | "-help" | "--help" | "?")
        printf "\
reveal-init: Create a new Reveal.js presentation project from files in REVEAL_PATH\n\
USAGE: reveal-init -h|--help|?|--version\n\
       reveal-init --delete-log\n\
       reveal-init [-d DIR] -c\n\
       reveal-init [-d DIR] --ls-themes|--ls-plugins\n\
       reveal-init [-d DIR] [-v|--verbose] [--git] [-t TITLE] [-f THEME]\n\
                   [--plugin[s] PLUGIN_1 PLUGIN_2 ... -]\n\
                   [--lib FILE_1 FILE_2 ... -]\n\
                   [--header HEADER] [-n NUM] [--short-tab|--long-tab] DIRNAME\n\
                   \n\
                   ...where DIRNAME is the directory where the new Reveal.js\n\
                   presentation project will reside in.\n\
                   \n\
GENERIC OPTIONS\n\
\n\
  -h, --help, ?           Print this help and exit.\n\
      --version           Print version and exit.\n\
  -v, --verbose           Inform what the program is doing to stdout.\n\
\n\
REVEAL_PATH OPTIONS\n\
\n\
  -d DIR                  Set DIR as REVEAL_PATH (temporary).\n\
  -D DIR                  Same as -d.\n\
  -c, --check             Check if REVEAL_PATH is valid.\n\
                          Once this option is encountered, reveal-init will\n\
                          check REVEAL_PATH and terminate afterwards. All other\n\
                          options will be ignored.\n\
      --ls-themes         List all themes that are available for import.\n\
      --ls-plugins        List all plugins that are available for import.\n\
\n\
PROJECT & SLIDES OPTIONS\n\
\n\
      --git               Initiate project as a Git repository.\n\
  -t, --title TITLE       Set presentation's <title>.\n\
  -f, --theme THEME       Theme (found in REVEAL_PATH/css/theme as a CSS file)\n\
                          to import. If THEME is \"all\", the script will import\n\
                          all themes. If THEME is \"-\", the script will not\n\
                          import any theme.\n\
                          Otherwise, import REVEAL_PATH/css/theme/THEME.css.\n\
      --plugin PLUGINS    Plugins (found in REVEAL_PATH/plugin, usually as a\n\
                          directory) to import. PLUGINS is where the plugins are\n\
                          listed, separated with a space character. The list\n\
                          must be ended with a dash (\"-\").\n\
      --plugins PLUGINS   Same as --plugin.\n\
      --header HEADER     Add a <h1>HEADER</h1> in the first slide. Set HEADER\n\
                          to \"_TITLE\" to make HEADER the same as TITLE\n\
                          (specified by -t or --title).\n\
  -n NUM                  Create NUM empty non-vertical slide(s).\n\
                          With --header: Create NUM empty non-vertical slide(s)\n\
                          after the first slide.\n\
      --short-tab         Use 2-space tabs in index.html.\n\
      --long-tab          Use 4-space tabs in index.html (default).\n\
      --lib FILES         Specify what files and/or folders in REVEAL_PATH/lib\n\
                          to import. FILES is where the files and folders' paths\n\
                          are listed, separated with a space character. The list\n\
                          must be ended with a dash (\"-\"). Paths must be\n\
                          relative to the REVEAL_PATH/lib directory. Without\n\
                          this option, copy the whole REVEAL_PATH/lib directory.\n\
\n\
MISC OPTIONS\n\
\n\
      --delete-log        Delete all reveal-init log files found in /tmp.\n\
\n\
ABOUT REVEAL_PATH:\n\
\n\
    REVEAL_PATH is a Unix environment variable that this script uses to import\n\
  files from. It should be Reveal.js project directory (e.g. cloned from\n\
  https://github.com/hakimel/reveal.js) and it should follow the orignal\n\
  directory structure (see \"Folder Structure\" section in Reveal.js project's\n\
  README for a basic reference). You should set REVEAL_PATH in .bashrc or any\n\
  script with similar functionality that you are using with, for example:\n\
  \n\
    export REVEAL_PATH=\"\$HOME/Projects/Forks/reveal.js\"\n"
        exit 0
        ;;
    "-version" | "--version")
        echo "reveal-init $VERSION"
        exit 0
        ;;
    "-delete-log" | "--delete-log")
        rm -f /tmp/reveal-init-*
        printf "\r\033[1;32mINFO   \033[0m Deleted all reveal-init log files\n"
        exit 0
        ;;
esac

# =======================

# Create a log file for this session in /tmp
# NOTE: This statement must be executed before any log() function call
logfile="$(mktemp /tmp/reveal-init-XXXXXXXX)"

[ $# -eq 0 ] && \
    log "Directory name not given.\n$t$t \bInvoke '--help' for more information" 3


# === PROCESS OPTIONS ===

REVEAL_PATH=$(readlink -m "$REVEAL_PATH")
opt=""

for arg in "$@"
do
    # If there's only one argument...
    if [ $# -eq 1 ] && \
       [[ "$1" != "-c" ]] && [[ "$1" != "-check" ]] && [[ "$1" != "--check" ]] && \
       [[ "$1" != "-ls-themes" ]] && [[ "$1" != "--ls-themes" ]] && \
       [[ "$1" != "-ls-plugins" ]] && [[ "$1" != "--ls-plugins" ]]
    then
        # IF the specified directory exists, stop the program
        [ -d "$1" ] && log "Directory '$1' exists" 3
        # ELSE assign dirname to the argument
        dirname="$1" && break
    fi

    case "$opt" in
        "-d" | "-D")
            REVEAL_PATH=$(readlink -m "$1")
            opt=""
            ;;
        "-t" | "-title" | "--title")
            title="$1"
            opt=""
            ;;
        "-f" | "-theme" | "--theme")
            case "$1" in
                '-') theme='-';;
                'all' | '*') theme='*';;
                *) theme="$1"
            esac

            opt=""
            ;;
        "-plugin" | "--plugin" | "-plugins" | "--plugins")
            [[ "$1" != '-' ]] && plugins="$plugins$1\n" || opt=""
            ;;
        "-header" | "--header")
            [[ "$1" == "_TITLE" ]] && header="$title" || header="$1"
            opt=""
            ;;
        "-n")
            if [[ "$1" =~ ^[0-9]+$ ]]; then
                n_slide="$1"
            else
                log "-n: Invalid input for number of slides, option ignored" 2
            fi
            opt=""
            ;;
        "-lib" | "--lib")
            [[ "$1" != "-" ]] && libfiles="$libfiles$1\n" || opt=""
            ;;
        *)
            case "$1" in
                # Each of these options takes only one argument as its input
                "-d" | "-D" | "-t" | "-title" | "--title" | "-f" \
                | "-theme" | "--theme" | "-header" | "--header" | "-n")
                    opt="$1";;

                "-plugin" | "--plugin" | "-plugins" | "--plugins")
                    opt="$1" && plugins="";;  # Reset the variable plugins

                "-lib" | "--lib")
                    opt="$1" && libfiles="";;  # Reset the variable libfiles

                "-c" | "-check" | "--check")
                    verbose=1
                    check_reveal_path
                    log "Done checking REVEAL_PATH." 0 0 '1;32'
                    if [ $n_err -gt 0 ]; then
                        log "$n_err error(s) found. Please fix them." 0 0 '1;31'
                        printf "Log messages can be found in $logfile\n"
                    else
                        log "REVEAL_PATH is valid." 0 0 '1;32'
                        rm "$logfile"
                    fi
                    exit 0
                    ;;

                "-ls-themes" | "--ls-themes")
                    /usr/bin/find "$REVEAL_PATH/css/theme"         \
                        -type f -name "*.css"                       \
                        -exec /usr/bin/basename -s .css {} ';'
                    [ $? -ne 0 ] && log "It seems that REVEAL_PATH is invalid" 3
                    rm "$logfile"
                    exit 0
                    ;;

                "-ls-plugins" | "--ls-plugins")
                    /usr/bin/find "$REVEAL_PATH/plugin"            \
                        -maxdepth 1 -type d -not -name "plugin"     \
                        -exec /usr/bin/basename {} ';'
                    [ $? -ne 0 ] && log "It seems that REVEAL_PATH is invalid" 3
                    rm "$logfile"
                    exit 0
                    ;;

                "-v" | "-verbose" | "--verbose") verbose=1;;

                "-git" | "--git")
                    if [ -n $(command -v git) ]; then
                        git="1"
                    else
                        log "--git: Git is not installed, option ignored" 1
                    fi
                    ;;

                "-short-tab" | "--short-tab") t="  ";;
                "-long-tab" | "--long-tab") t="    ";;

                *) log "Invalid option '$1', aborting..." 3;;
            esac
            ;;
    esac
    shift
done

[ -z "$theme" ] && theme="-"
[ -z "$plugins" ] && plugins="-"
[ -z "$libfiles" ] && libfiles="-"

# =======================

# === CHECK $REVEAL_PATH ===

if [ -z "$REVEAL_PATH" ]; then
    log "REVEAL_PATH is not set" 1
    echo "reveal-init won't work without REVEAL_PATH, what now?"
    echo "    1: Use the current directory as REVEAL_PATH (temporary)"
    echo "    2: Set a value for REVEAL_PATH (temporary)"
    echo "    3: Abort and set a permanent value for REVEAL_PATH"
    read -p "[1|2|3] " option

    case "$option" in
        "1")
            echo "Okay, REVEAL_PATH is the current directory"
            REVEAL_PATH="."
            ;;
        "2")
            read -p "REVEAL_PATH: " REVEAL_PATH
            [ -z "$REVEAL_PATH" ] && log "Invalid value for REVEAL_PATH" 3
            ;;
        "3")
            echo "Then go set a value for it with 'export'"
            log "Aborting..." 3
            ;;
        *)
            log "Invalid option, aborting..." 3
            ;;
    esac
fi

echo "REVEAL_PATH: $(readlink -f $REVEAL_PATH)"
check_reveal_path
if [ $n_err -gt 0 ]; then
    log "Fix the above problem(s) and try again" 3 1
fi

# ==========================

# === START COPYING FILES ===

# Make directories

if [[ "${dirname:0:1}" == '-' ]]; then
    log "It is not recommended to start a directory name with a dash (\"-\")" 1
fi

if [ $git != "0" ]; then
    log "Initializing Git repository..."
    git init -- "$dirname"
fi

log "Creating $dirname/"
log "Creating $dirname/js/"
mkdir -p -- "$dirname/js"
[ $? -ne 0 ] && log "mkdir failed to create $dirname/" 3 1
log "Creating $dirname/css/"
mkdir -- "$dirname/css"

# Copy themes

mkdir -p -- "$dirname/css/theme/source"

case "$theme" in
    '*')
        log "Copying all CSS files in \$REVEAL_PATH/css/theme/ into $dirname/css/theme"
        cp -- "$REVEAL_PATH"/css/theme/*.css "$dirname/css/theme/"
        log "Copying all SCSS files in \$REVEAL_PATH/css/theme/source/ into $dirname/css/theme/source"
        cp -- "$REVEAL_PATH"/css/theme/source/*.scss "$dirname/css/theme/source/"
        ;;
    '-')
        rm -rf -- "$dirname/css/theme"
        ;;
    *)
        if [ -f "$REVEAL_PATH/css/theme/$theme.css" ]
        then
            log "Copying \$REVEAL_PATH/css/theme/$theme.css to $dirname/css/theme/$theme.css"
            cp -- "$REVEAL_PATH/css/theme/$theme.css" "$dirname/css/theme/$theme.css"
            if [ -f "$REVEAL_PATH/css/theme/source/$theme.scss" ]
            then
                log "Copying \$REVEAL_PATH/css/theme/source/$theme.scss to $dirname/css/theme/source/$theme.scss"
                cp -- "$REVEAL_PATH/css/theme/source/$theme.scss" "$dirname/css/theme/source/$theme.scss"
            else
                rm -rf -- "$dirname/css/theme/source"
            fi
        else
            log "Theme '$theme' not found, ignoring..." 1
            rm -rf -- "$dirname/css/theme"
        fi
        ;;
esac

# Copy plugins

if [[ "$plugins" != "-" ]]
then
    log "Creating $dirname/plugin/"
    mkdir -- "$dirname/plugin"
    echo -e "$plugins" | while read plugin
    do
        [ -z "$plugin" ] && continue
        if [ -d "$REVEAL_PATH/plugin/$plugin" ]
        then
            log "Copying \$REVEAL_PATH/plugin/$plugin to $dirname/plugin/$plugin"
            cp -r -- "$REVEAL_PATH/plugin/$plugin" "$dirname/plugin/$plugin"
        else
            log "Plugin '$plugin' not found, ignoring..." 1
        fi
    done
fi

# Copy js/ (supposedly contains reveal.js) and reveal.css

log "Copying all files in \$REVEAL_PATH/js/ into $dirname/js/"
cp -r -- "$REVEAL_PATH"/js/* "$dirname/js/"
log "Copying \$REVEAL_PATH/css/reveal.css to $dirname/css/reveal.css"
cp -- "$REVEAL_PATH/css/reveal.css" "$dirname/css/reveal.css"

# Copy lib/

mkdir -- "$dirname/lib"

case "$libfiles" in
    '*')
        log "Copying \$REVEAL_PATH/lib/ into $dirname/"
        [ -d "$REVEAL_PATH/lib" ] && cp -r -- "$REVEAL_PATH/lib" "$dirname"
        ;;
    '-')
        rm -rf -- "$dirname/lib"
        ;;
    *)
        echo -e "$libfiles" | sort | while read libfile
        do
            # Eliminate trailing forward slashes in the path
            while [ "${libfile:${#libfile}-1:1}" == "/" ]
            do
                libfile="${libfile:0:${#libfile}-1}"
            done

            # If $libfile is empty then move on
            [ -z "$libfile" ] && continue

            if [ -d "$REVEAL_PATH/lib/$libfile" ]
            then
                # Here $libfile is a directory, so first look in $libfiles to
                # see how many paths that contain $libfile/ there are. If there
                # is 0, that means the user wants to import everything in the
                # directory $libfile (considering that $libfile's trailing
                # forward slashes have been removed earlier). If there is more
                # than 0, the user has chosen to import certain files in the
                # directory $libfile only.
                [ $(echo -e "$libfiles" | grep -cP '^'"$libfile"'[/].+') -eq 0 ] \
                    && cp -r -- "$REVEAL_PATH/lib/$libfile" "$dirname/lib/$(dirname $libfile)" \
                    || mkdir -- "$dirname/lib/$libfile"
            elif [ -f "$REVEAL_PATH/lib/$libfile" ]
            then
                # Here we use dirname to extract the parent directories of the
                # $libfile file (relative to $REVEAL_PATH/lib of course).
                [ -d "$dirname/lib/$(dirname $libfile)" ] \
                    && cp -- "$REVEAL_PATH/lib/$libfile" "$dirname/lib/$(dirname $libfile)" \
                    || cp -- "$REVEAL_PATH/lib/$libfile" "$dirname/lib/"
            else
                log "File '\$REVEAL_PATH/lib/$libfile' not found, ignoring..." 1
            fi
        done
        ;;
esac

# Create index.html

log "Creating $dirname/index.md"
touch -- "$dirname/index.html"
indexf="$dirname/index.html"

printf "<!DOCTYPE html>\n<html>\n$t<head>\n$t$t<meta charset=\"utf-8\">\n\
$t$t<meta name=\"viewport\" content=\"width=device-width\
, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n\n\
$t$t<title>$title</title>\n\n\
$t$t<link rel=\"stylesheet\" href=\"css/reveal.css\">\n" > "$indexf"

[[ "$theme" != "-" ]] && [[ "$theme" != "*" ]] && [ -d "$dirname/css/theme" ] && \
    printf "$t$t<link rel=\"stylesheet\" href=\"css/theme/$theme.css\">\n" >> "$indexf"

# NOTE: Importing zenburn.css is being considered for removal
# in a future release.
[ -f "$dirname/lib/css/zenburn.css" ] && \
printf \
"\n$t$t<!-- Theme used for syntax highlighting of code -->\n\
$t$t<link rel=\"stylesheet\" href=\"lib/css/zenburn.css\">\n" >> "$indexf"

[ -f "$dirname/lib/js/html5shiv.js" ] && \
printf \
"\n$t$t<!--[if lt IE 9]>\n$t$t$t<script src=\"lib/js/html5shiv.js\">\
</script>\n$t$t<![endif]-->\n" >> "$indexf"

printf "$t</head>\n$t<body>\n$t$t<div class=\"reveal\">\n$t$t$t<div class=\"slides\">\n" >> "$indexf"

[[ -n "$header" ]] && \
    printf "$t$t$t$t<section>\n$t$t$t$t$t<h1>$header</h1>\n$t$t$t$t</section>\n" >> "$indexf"

if [ $n_slide -gt 0 ]; then
    while [ $n_slide -ne 0 ]
    do
        printf "$t$t$t$t<section>\n$t$t$t$t</section>\n" >> "$indexf"
        n_slide=$(( $n_slide - 1))
    done
fi

printf "$t$t$t</div>\n$t$t</div>\n\n" >> "$indexf"

[ -f "$dirname/lib/js/head.min.js" ] && \
    printf "$t$t<script src=\"lib/js/head.min.js\"></script>\n" >> "$indexf"

printf "$t$t<script src=\"js/reveal.js\"></script>\n\n" >> "$indexf"

if [[ "$plugins" == "-" ]]
then
    printf "$t$t<script>\n$t$t$t\x52eveal.initialize();\n$t$t</script>\n" >> "$indexf"
else
    printf "$t$t<script>\n$t$t$t\x52eveal.initialize({\n$t$t$t$t\x64ependencies: [\n" >> "$indexf"
    ls -1A -- "$dirname/plugin" | while read plugin
    do
        [ -z "$plugin" ] && continue

        js_indexf=""

        # Guess plugin's index JavaScript file from the plugin's directory name

        posb_fname=("$plugin.js" "${plugin:0:${#plugin}-3}.js" "$plugin" "script.js" "index.js")

        for tfname in "${posb_fname[@]}"
        do
            if [[ -f "$dirname/plugin/$plugin/${tfname:0:${#tfname}-3}.min.js" ]]
            then
                js_indexf="${tfname:0:${#tfname}-3}.min.js"
                break
            elif [[ -f "$dirname/plugin/$plugin/$tfname" ]]
            then
                js_indexf="$tfname"
                break
            fi
        done

        if [ -z "$js_indexf" ]; then
            log "Failed to get plugin '$plugin''s JavaScript file to load from, please do this manually" 1
            continue
        fi

        printf "$t$t$t$t$t{ src: 'plugin/$plugin/$js_indexf' },\n" >> "$indexf"
    done
    printf "$t$t$t$t]\n$t$t$t});\n$t$t</script>\n" >> "$indexf"
fi

printf "$t</body>\n</html>\n" >> "$indexf"

verbose=1  # It is necessary to print the following log message to stdout
log "Generated a new slide deck at $dirname." 0 0 '1;32'
rm "$logfile"
unalias printf echo rm cp ls mkdir touch command tee wc readlink sort grep
exit 0
