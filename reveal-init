#!/bin/sh
# reveal-init - Reveal.js slide deck initiator
#
# Written by Nguyen Hoang Duong (@you-create)
#
# This is free and unencumbered software released into the public domain.
# For more information, please refer to <http://unlicense.org/>

# === MAIN VARIABLES ===

dirname=""   # Project directory of the slide deck
title=""     # Title of the presentation (which goes into <title></title>)
theme=""     # Theme for the slide deck
plugins=""   # List of plugins (separated by white spaces)
n_slide=0    # Number of empty non-vertical slides to create
git=0        # Initiate a Git repository? (0 = false, true otherwise)
copylib=1    # Copy everything in REVEAL_PATH/lib? (0 for no, yes otherwise)
libfiles=""  # Paths of files in REVEAL_PATH/lib (relative) to copy and import

n_err=0      # Number of errors
verbose=0    # Be verbose? (0 = no, otherwise yes)
logfile="$(mktemp /tmp/reveal-init-XXXXXXXX)"  # Path to log file

# ======================

# === PROGRAM'S VARIABLES ===
# These values remain constant throughout the program

VERSION="master (<- 2.2 Alpha)"  # reveal-init's version
t="    "  # Tab

# ===========================

# === ALIASES ===
# These aliases are created to avoid security risks. If you think they are
# causing problems, remove the alias command invocation (also unalias at the
# near end of the file). Some aliases may also be useless because some commands
# are your Shell's built-ins.

alias printf="/usr/bin/printf" echo="/usr/bin/echo" cp="/usr/bin/cp" \
      ls="/usr/bin/ls" mkdir="/usr/bin/mkdir" touch="/usr/bin/touch"  \
      command="/usr/bin/command" tee="/usr/bin/tee" wc="/usr/bin/wc"

# ===============

# A simple function for logging. Requires 3 parameters
#     $1: Log message
#     $2: Severity of the event being logged
#     $3: Put a message to remind the user that log messages are kept in
#         $logfile (only touched if $2 is "3" or "fatal")
#
# Valid values for the second parameter are:
#    0 info       No severity, everything is working as expected.
#    1 warn       Mild severity, something is wrong but can be easily manually
#                 fixed later.
#    2 err        High severity, something is wrong and can hardly be fixed.
#      error      Same as err.
#    3 fatal      Extreme severity, the program cannot further work.
#
# By design, any other value for the second parameter is treated as "info". This
# means for severity of 'info', the second parameter may be omitted.
function log() {
    case $2 in
        "1" | "warn")
            printf "\033[1;33mWARNING\033[0m $1\n" | tee -a $logfile
            ;;
        "2" | "err" | "error")
            printf "\033[1;31mERROR  \033[0m $1\n" | tee -a $logfile
            n_err=$(( $n_err + 1 ))
            ;;
        "3" | "fatal")
            printf "\033[1;31mFATAL  \033[0m $1\n" | tee -a $logfile
            [[ $3 -ne 0 ]] && printf "$t$t \bLog messages can be found in $logfile\n" \
                           || rm $logfile
            exit 1
            ;;
        *)
            printf "INFO    $1\n" >> $logfile
            [[ $verbose != "0" ]] && printf "INFO    $1\n"
            ;;
    esac

    return 0
}


# Check if REVEAL_PATH is valid as a Reveal.js repository to begin with
function check_reveal_path() {
    # Must include:
    #   - $REVEAL_PATH/css/reveal.css
    #   - $REVEAL_PATH/js/reveal.js
    #
    # Warn if absent:
    #   - $REVEAL_PATH/css/theme          (no theme)
    #   - $REVEAL_PATH/lib/js/head.min.js (no plugin)
    #   - $REVEAL_PATH/plugin             (no plugin)

    log "Checking REVEAL_PATH ($REVEAL_PATH)..."

    ! [ -d "$REVEAL_PATH" ] && log "REVEAL_PATH ($REVEAL_PATH) not found" 3

    ! [ -f "$REVEAL_PATH"/css/reveal.css ] && log "$REVEAL_PATH/css/reveal.css not found" 2
    ! [ -d "$REVEAL_PATH"/css/theme ] || [[ -z $(ls -A "$REVEAL_PATH"/css/theme) ]] && \
        log "No theme found" 1 && theme="-"

    ! [ -f "$REVEAL_PATH"/js/reveal.js ] && log "$REVEAL_PATH/js/reveal.js not found" 2

    ! [ -f "$REVEAL_PATH"/lib/js/head.min.js ] && \
        log "$REVEAL_PATH/lib/js/head.min.js not found, plugins won't be loaded" 1 && \
        plugins="-"

    ! [ -d "$REVEAL_PATH"/plugin ] || [[ -z $(ls -A "$REVEAL_PATH/plugin") ]] && \
        log "No plugin found" 1 && plugins="-"
}


# Given a directory path, check if its last character is "/"
# and echo the path with the forward slash removed.
function reformat_path() {
    [[ ${1:$(echo -n $1 | wc -c)-1:1} == "/" ]]  \
        && echo -n ${1:0:$(echo -n $1 | wc -c)-1} \
        || echo -n $1
}

# ===========================

case $1 in
    "-h" | "--help" | "?")
        printf "\
reveal-init: Create a new Reveal.js presentation project from files in REVEAL_PATH\n\
USAGE: reveal-init [-h|--help|?|--version]\n\
       reveal-init [-d DIR] -c\n\
       reveal-init [-v|--verbose] [-d DIR] [--git] [-t TITLE] [-f THEME]\n\
                   [--plugin[s] PLUGIN_1 PLUGIN_2 ... -]\n\
                   [--lib FILE_1 FILE_2 ... -]\n\
                   [--header HEADER] [-n NUM] [--short-tab|--long-tab] DIRNAME\n\
                   \n\
                   ...where DIRNAME is the directory where the new Reveal.js\n\
                   presentation project will reside in.\n\n\
  -h, --help, ?           Print this help and exit.\n\
      --version           Print version and exit.\n\
  -v, --verbose           Inform what the program is doing to stdout.\n\
  -d DIR                  Set DIR as REVEAL_PATH (temporary).\n\
  -c, --check             Check if REVEAL_PATH is valid.\n\
                          Once this option is encountered, reveal-init will\n\
                          check REVEAL_PATH and terminate afterwards. All other\n\
                          options are ignored.\n\
      --git               Initiate project as a Git repository.\n\
  -t, --title TITLE       Set presentation's <title>.\n\
  -f, --theme THEME       Theme (found in REVEAL_PATH/css/theme as a CSS file)\n\
                          to import. If THEME is \"all\", the script will import\n\
                          all themes. If THEME is \"-\", the script will not\n\
                          import any theme.\n\
                          Otherwise, import REVEAL_PATH/css/theme/THEME.css.\n\
      --plugin PLUGINS    Plugins (found in REVEAL_PATH/plugin, usually as a\n\
                          directory) to import. PLUGINS is where the plugins are\n\
                          listed, separated with a space character. The list\n\
                          must be ended with a dash (\"-\").\n\
      --plugins PLUGINS   Same as --plugin.\n\
      --header HEADER     Add a <h1>HEADER</h1> in the first slide. Set HEADER\n\
                          to \"_TITLE\" to make HEADER the same as TITLE\n\
                          (specified by -t or --title).\n\
  -n NUM                  Create NUM empty non-vertical slide(s).\n\
                          With --header: Create NUM empty non-vertical slide(s)\n\
                          after the first slide.\n\
      --short-tab         Use 2-space tabs in index.html.\n\
      --long-tab          Use 4-space tabs in index.html (default).\n\
      --lib FILES         Specify what files and/or folders in REVEAL_PATH/lib\n\
                          to import. FILES is where the files and folders' paths\n\
                          are listed, separated with a space character. The list\n\
                          must be ended with a dash (\"-\"). Paths must be\n\
                          relative to the REVEAL_PATH/lib directory. Without\n\
                          this option, copy the whole REVEAL_PATH/lib directory.\n\n\
ABOUT REVEAL_PATH:\n\n\
    REVEAL_PATH is a Unix environment variable that this script uses to import\n\
  files from. It should be Reveal.js project directory (e.g. cloned from\n\
  https://github.com/hakimel/reveal.js) and it should follow the orignal\n\
  directory structure (see \"Folder Structure\" section in Reveal.js project's\n\
  README for a basic reference). You should set REVEAL_PATH in .bashrc or any\n\
  script with similar functionality that you are using with, for example:\n\n\
    export REVEAL_PATH=\"\$HOME/Projects/Forks/reveal.js\"\n"
        rm $logfile
        exit 0
        ;;
    "--version")
        echo "reveal-init $VERSION"
        rm $logfile
        exit 0
        ;;
esac

[ $# -eq 0 ] && \
    log "Directory name not given.\n$t$t \bInvoke '--help' for more information" 3

# === PROCESS OPTIONS ===

REVEAL_PATH=$(reformat_path $REVEAL_PATH)
opt=""

for arg in "$@"
do
    # If there's only one argument...
    if [ $# -eq 1 ] && [[ $1 != "-c" ]] && [[ $1 != "--check" ]]; then
        [ -d "$1" ] && log "Directory '$1' exists" 3
        dirname=$1 && break
    fi

    case $opt in
        "-d")
            REVEAL_PATH=$(reformat_path $1)
            opt=""
            ;;
        "-t" | "-title" | "--title")
            title=$1
            opt=""
            ;;
        "-f" | "-theme" | "--theme")
            if [[ $1 == "-" ]] || [[ $theme == "-" ]]; then
                theme="-"
            elif [[ $1 == "all" ]] || [[ $1 == "*" ]]; then
                theme="*"
            elif [ -f "$REVEAL_PATH"/css/theme/$1.css ]; then
                theme="$1"
            else
                log "Theme '$1' ($REVEAL_PATH/css/theme/$1.css) not found" 2
            fi
            opt=""
            ;;
        "-plugin" | "--plugin" | "-plugins" | "--plugins")
            if [[ $1 != "-" ]]; then
                [ -d "$REVEAL_PATH"/plugin/$1 ] \
                  && [[ $plugins != "-" ]] && plugins="$plugins$1 " \
                  || log "Plugin '$1' ("$REVEAL_PATH"/plugin/$1) not found" 2
            else
                opt=""
            fi
            ;;
        "-header" | "--header")
            [[ $1 == "_TITLE" ]] && header=$title || header=$1
            opt=""
            ;;
        "-n")
            [[ $1 =~ ^[0-9]+$ ]] \
              && n_slide=$1 \
              || log "-n: Invalid input for number of slides, option ignored" 2
            opt=""
            ;;
        "--lib")
            copylib=0

            if [[ $1 == "-" ]]
            then
                opt=""
            elif [[ -d "$REVEAL_PATH/lib/$1" ]] || [[ -f "$REVEAL_PATH/lib/$1" ]]
            then
                libfiles="$libfiles""$1 "
            else
                log "File $REVEAL_PATH/lib/$1 doesn't exist, ignoring...." 1
            fi
            ;;
        *)
            case $1 in
                "-d" | "-t" | "-title" | "--title" | "-f" | "-theme" | "--theme" \
                | "-plugin" | "--plugin" | "-plugins" | "--plugins" | "--lib" \
                | "-header" | "--header" | "-n") opt=$1;;

                "-c" | "--check")
                    verbose=1
                    check_reveal_path
                    log "\r\033[1;32mINFO   \033[0m Done checking REVEAL_PATH."
                    if [ $n_err -gt 0 ]; then
                        log "\r\033[1;31mINFO   \033[0m $n_err error(s) found. Please fix them."
                        printf "$t$t \bLog messages can be found in $logfile\n"
                    else
                        log "\r\033[1;32mINFO   \033[0m REVEAL_PATH is valid."
                        rm $logfile
                    fi
                    exit 0
                    ;;

                "-v" | "--verbose") verbose=1;;

                "--git")
                    [ -z $(command -v git) ] \
                        && log "--git: Git is not installed, option ignored" 1 \
                        || git="1"
                    ;;

                "--short-tab") t="  ";;
                "--long-tab") t="    ";;

                *) log "Invalid option '$1', aborting..." 3;;
            esac
            ;;
    esac
    shift
done

[[ $theme == "" ]] && theme="-"
[[ $plugins == "" ]] && plugins="-"

# =======================

# === CHECK $REVEAL_PATH ===

if [ -z "$REVEAL_PATH" ]; then
    log "REVEAL_PATH is not set" 1
    echo "reveal-init won't work without REVEAL_PATH, what now?"
    echo "    1: Use the current directory as REVEAL_PATH (temporary)"
    echo "    2: Set a value for REVEAL_PATH (temporary)"
    echo "    3: Abort and set a permanent value for REVEAL_PATH"
    read -p "[1|2|3] " option

    case "$option" in
        "1")
            echo "Okay, REVEAL_PATH is the current directory"
            REVEAL_PATH="."
            ;;
        "2")
            read -p "REVEAL_PATH: " REVEAL_PATH
            [ -z "$REVEAL_PATH" ] && log "Invalid value for REVEAL_PATH" 3
            ;;
        "3")
            echo "Then go set a value for it with 'export'"
            log "Aborting..." 3
            ;;
        *)
            log "Invalid option, aborting..." 3
            ;;
    esac
fi

check_reveal_path
[ $n_err -gt 0 ] && log "Fix the above problem(s) and try again" 3 1

# ==========================

# === START COPYING FILES ===

# Make directories

[ $git != "0" ] && log "Initializing Git repository..." && git init -- "$dirname"
log "Creating $dirname/"
log "Creating $dirname/js/"
log "Creating $dirname/css/"
mkdir -p -- "$dirname"/js
mkdir -- "$dirname"/css

# Copy themes

[[ $theme != "-" ]] && log "Creating $dirname/css/theme/" &&         \
                       mkdir "$dirname"/css/theme &&                  \
case $theme in
    "*")
        log "Copying all CSS and SCSS files in $REVEAL_PATH/css/theme/ into $dirname/css/theme"
        cp -- "$REVEAL_PATH"/css/theme/*.css \
            "$REVEAL_PATH"/css/theme/source/*.scss "$dirname"/css/theme/
        ;;
    *)
        log "Copying $REVEAL_PATH/css/theme/$theme.css to $dirname/css/theme/$theme.css"
        cp -- "$REVEAL_PATH"/css/theme/$theme.css "$dirname"/css/theme/$theme.css
        [ -f "$REVEAL_PATH"/css/theme/source/$theme.scss ] && \
            log "Copying $REVEAL_PATH/css/theme/$theme.scss to $dirname/css/theme/$theme.scss"
            cp -- "$REVEAL_PATH"/css/theme/source/$theme.scss "$dirname"/css/theme/$theme.scss
        ;;
esac

# Copy plugins

[[ $plugins != "-" ]] && log "Creating $dirname/plugin/" \
                         mkdir -- "$dirname"/plugin &&    \
for plugin in $plugins; do
    log "Copying $REVEAL_PATH/plugin/$plugin to $dirname/plugin/$plugin"
    cp -r -- "$REVEAL_PATH"/plugin/$plugin "$dirname"/plugin/$plugin
done

# Copy js/ (supposedly contains reveal.js) and reveal.css

log "Copying all files in $REVEAL_PATH/js/ into $dirname/js/"
cp -r -- "$REVEAL_PATH"/js/* "$dirname"/js/
log "Copying $REVEAL_PATH/css/reveal.css to $dirname/css/reveal.css"
cp -- "$REVEAL_PATH"/css/reveal.css "$dirname"/css/reveal.css

# Copy lib/

if [[ $copylib == "0" ]]; then
    mkdir "$dirname/lib"
    for libfile in $libfiles
    do
        log "Copying $REVEAL_PATH/lib/$libfile into $dirname/lib/"
        cp -r -- "$REVEAL_PATH/lib/$libfile" "$dirname"/lib
    done
else
    log "Copying $REVEAL_PATH/lib/ into $dirname/"
    [ -d "$REVEAL_PATH"/lib ] && cp -r -- "$REVEAL_PATH"/lib "$dirname"
fi

# Create index.html

log "Creating index.md"
touch -- "$dirname"/index.html
indexf="$dirname"/index.html

printf "<!DOCTYPE html>\n<html>\n$t<head>\n$t$t<meta charset=\"utf-8\">\n\
$t$t<meta name=\"viewport\" content=\"width=device-width\
, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n\n\
$t$t<title>$title</title>\n\n\
$t$t<link rel=\"stylesheet\" href=\"css/reveal.css\">\n" > $indexf

[[ $theme != "-" ]] && [[ $theme != "*" ]] && \
    printf "$t$t<link rel=\"stylesheet\" href=\"css/theme/$theme.css\">\n" >> $indexf

[ -f "$dirname"/lib/css/zenburn.css ] && \
printf \
"\n$t$t<!-- Theme used for syntax highlighting of code -->\n\
$t$t<link rel=\"stylesheet\" href=\"lib/css/zenburn.css\">\n" >> $indexf

[ -f "$dirname"/lib/js/html5shiv.js ] && \
printf \
"\n$t$t<!--[if lt IE 9]>\n$t$t$t<script src=\"lib/js/html5shiv.js\">\
</script>\n$t$t<![endif]-->\n" >> $indexf

printf "$t</head>\n$t<body>\n$t$t<div class=\"reveal\">\n$t$t$t<div class=\"slides\">\n" >> $indexf

[[ -n $header ]] && \
    printf "$t$t$t$t<section>\n$t$t$t$t$t<h1>$header</h1>\n$t$t$t$t</section>\n" >> $indexf

if [ $n_slide -gt 0 ]; then
    while [ $n_slide -ne 0 ]
    do
        printf "$t$t$t$t<section>\n$t$t$t$t</section>\n" >> $indexf
        n_slide=$(( $n_slide - 1))
    done
fi

printf "$t$t$t</div>\n$t$t</div>\n\n" >> $indexf

[ -f "$dirname"/lib/js/head.min.js ] && \
    printf "$t$t<script src=\"lib/js/head.min.js\"></script>\n" >> $indexf

printf "$t$t<script src=\"js/reveal.js\"></script>\n\n" >> $indexf

if [[ $plugins == "-" ]]
then
    printf "$t$t<script>\n$t$t$t\x52eveal.initialize();\n$t$t</script>\n" >> $indexf
else
    printf "$t$t<script>\n$t$t$t\x52eveal.initialize({\n$t$t$t$t\x64ependencies: [\n" >> $indexf
    for plugin in $plugins; do
        js_indexf=""

        # Guess plugin's index JavaScript file from the plugin's directory name

        posb_fname=("$plugin.js" "${plugin:0:${#plugin}-3}.js" "$plugin" "script.js" "index.js")

        for tfname in ${posb_fname[@]}
        do
            if [[ -f "$dirname"/plugin/$plugin/${tfname:0:${#tfname}-3}.min.js ]]
            then
                js_indexf=${tfname:0:${#tfname}-3}.min.js
                break
            elif [[ -f "$dirname"/plugin/$plugin/$tfname ]]
            then
                js_indexf=$tfname
                break
            fi
        done

        if [ -z $js_indexf ]; then
            log "Failed to get plugin '$plugin''s JavaScript file to load from, please do this manually" 1
            continue
        fi

        printf "$t$t$t$t$t{ src: 'plugin/$plugin/$js_indexf' },\n" >> $indexf
    done
    printf "$t$t$t$t]\n$t$t$t});\n$t$t</script>\n" >> $indexf
fi

printf "$t</body>\n</html>\n" >> $indexf

verbose=1  # It is necessary to print the following log message to stdout
log "\r\033[1;32mINFO   \033[0m Generated a new slide deck at $dirname."
rm $logfile
unalias printf echo cp ls mkdir touch command tee wc
exit 0
