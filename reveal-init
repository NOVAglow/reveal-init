#!/bin/sh
# reveal-init - Reveal.js slide deck initiator
#
# Written by Nguyen Hoang Duong (@NOVAglow)
#
# This is free and unencumbered software released into the public domain.
# For more information, please refer to <http://unlicense.org/>

# === MAIN VARIABLES ===

dirname=""  # Project directory of the slide deck
title=""    # Title of the presentation (which goes into <title></title>)
theme=""    # Theme for the slide deck
plugins=""  # List of plugins (separated by white spaces)

# ======================

# === PROGRAM'S VARIABLES ===

VERSION="1.1 RC (release candidate)"
t="    "   # Tab
n_err=0    # Number of errors
n_slide=0  # Number of empty non-vertical slides to create

function warn() {
    printf "\033[1;33mWARNING\033[0m $1.\n"
}

function err() {
    printf "\033[1;31mERROR\033[0m $1.\n"; n_err=$(( $n_err + 1 ))
}

function fatal() {
    printf "\033[1;31mFATAL\033[0m $1.\n"; exit 1
}

# ===========================

case $1 in
    "-h" | "--help" | "?")
        printf "\
reveal-init: Create a new Reveal.js presentation project from files in \$REVEAL_PATH\n\
USAGE: reveal-init [-h|--help|?|-v|--version] [ [-d DIR] [-t TITLE] [-f THEME]\n\
                   [--plugin[s] PLUGINS -] [--header HEADER] [-n NUM]\n\
                   [--short-tab|--long-tab] DIRNAME ]\n\n\
  -h, --help, ?           Print this help and exit.\n\
  -v, --version           Print version and exit.\n\
  -d DIR                  Set DIR as \$REVEAL_PATH (temporary).\n\
  -t, --title TITLE       Set presentation's <title>.\n\
  -f, --theme THEME       Theme (found in \$REVEAL_PATH/css/theme as a CSS file)\n\
                          to import. If THEME is \"all\", the script will import\n\
                          all themes. If THEME is \"-\", the script will not\n\
                          import any theme.\n\
                          Otherwise, import \$REVEAL_PATH/css/theme/THEME.css.\n\
      --plugin PLUGINS    Plugins (found in \$REVEAL_PATH/plugin, usually as a\n\
                          directory) to import. PLUGINS is where the plugins are\n\
                          listed, separated with a space character. The list\n\
                          must be ended with a dash (\"-\").\n\
      --plugins PLUGINS   Same as --plugin.\n\
      --header HEADER     Add a <h1>HEADER</h1> in the first slide. Set HEADER\n\
                          to \"_TITLE\" to make HEADER the same as TITLE\n\
                          (specified by -t or --title).\n\
  -n NUM                  Create NUM empty non-vertical slide(s).\n\
                          With --header: Create NUM empty non-vertical slide(s)\n\
                          after the first slide.\n\
      --short-tab         Use 2-space tabs in index.html.\n\
      --long-tab          Use 4-space tabs in index.html (default).\n\n\
ABOUT \$REVEAL_PATH:\n\n\
    \$REVEAL_PATH is the environment variable that this script uses to import\n\
  files from. It should be Reveal.js project directory (e.g. cloned from\n\
  https://github.com/hakimel/reveal.js) and it should follow the orignal\n\
  directory structure (see \"Folder Structure\" section in Reveal.js project's\n\
  README for a basic reference). You should set \$REVEAL_PATH in .bashrc or any\n\
  script with similar functionality that you are using with, for example:\n\n\
    export REVEAL_PATH=\"\$HOME/Projects/Forks/reveal.js\"\n"
        exit 0
        ;;
    "-v" | "--version")
        echo "reveal-init $VERSION"
        exit 0
        ;;
esac

[ $# -eq 0 ] && \
    fatal "Directory name not given.\nInvoke '--help' for more information"

# === PROCESS OPTIONS ===

opt=""

for arg in "$@"
do
    if [ $# -eq 1 ]; then
        [ -d $1 ] && err "Directory '$1' exists" && exit 1
        dirname=$1 && break
    fi

    case $opt in
        "-d")
            REVEAL_PATH=$1
            opt=""
            ;;
        "-t" | "-title" | "--title")
            title=$1
            opt=""
            ;;
        "-f" | "-theme" | "--theme")
            if [[ $1 == "-" ]] || [[ $theme == "-" ]]; then
                theme="-"
            elif [[ $1 == "all" ]] || [[ $1 == "*" ]]; then
                theme="*"
            elif [ -f $REVEAL_PATH/css/theme/$1.css ]; then
                theme="$1"
            else
                err "Theme '$1' ($REVEAL_PATH/css/theme/$1.css) not found"
            fi
            opt=""
            ;;
        "-plugin" | "--plugin" | "-plugins" | "--plugins")
            if [[ $1 != "-" ]]; then
                [ -d $REVEAL_PATH/plugin/$1 ] \
                  && [[ $plugins != "-" ]] && plugins="$plugins$1 " \
                  || err "Plugin '$1' ($REVEAL_PATH/plugin/$1) not found"
            else
                opt=""
            fi
            ;;
        "-header" | "--header")
            [[ $1 == "_TITLE" ]] && header=$title || header=$1
            opt=""
            ;;
        "-n")
            [[ $1 =~ ^[0-9]+$ ]] \
              && n_slide=$1 \
              || err "-n: Invalid input for number of slides, option ignored"
            opt=""
            ;;
        *)
            case $1 in
                "-d" | "-t" | "-title" | "--title" | "-f" | "-theme" | "--theme" \
                | "-plugin" | "--plugin" | "-plugins" | "--plugins" \
                | "-header" | "--header" | "-n")
                    opt=$1;;
                "--short-tab") t="  ";;
                "--long-tab") t="    ";;
                *) err "Invalid option '$1', aborting..." && exit 1;;
            esac
            ;;
    esac
    shift
done

[[ $theme == "" ]] && theme="-"
[[ $plugins == "" ]] && plugins="-"

# =======================

# === CHECK $REVEAL_PATH ===

if [ -z $REVEAL_PATH ]; then
    warn "\$REVEAL_PATH is not set"
    echo "reveal-init won't work without \$REVEAL_PATH, what now?"
    echo "    1: Use the current directory as \$REVEAL_PATH (temporary)"
    echo "    2: Set a value for \$REVEAL_PATH (temporary)"
    echo "    3: Abort and set a permanent value for \$REVEAL_PATH"
    read -p "[1|2|3] " rpe_c

    case $rpe_c in
        1)
            echo "Okay, \$REVEAL_PATH is the current directory"
            REVEAL_PATH="."
            ;;
        2)
            read -p "\$REVEAL_PATH: " REVEAL_PATH
            [ -z $REVEAL_PATH ] && fatal "Invalid value for \$REVEAL_PATH"
            ;;
        3)
            echo "Then go set a value for it with 'export'"
            echo "Aborting..."
            exit 1
            ;;
        *)
            fatal "Invalid option, aborting.."
            ;;
    esac
fi

# Must include:
#   - $REVEAL_PATH/css/reveal.css
#   - $REVEAL_PATH/js/reveal.js
#
# Warn if absent:
#   - $REVEAL_PATH/css/theme          (no theme)
#   - $REVEAL_PATH/lib/js/head.min.js (no plugin)
#   - $REVEAL_PATH/plugin             (no plugin)

echo "Checking \$REVEAL_PATH..."

! [ -d $REVEAL_PATH ] && fatal "\$REVEAL_PATH ($REVEAL_PATH) not found"

! [ -f $REVEAL_PATH/css/reveal.css ] && err "$REVEAL_PATH/css/reveal.css not found"
! [ -d $REVEAL_PATH/css/theme ] || [[ -z $(ls $REVEAL_PATH/css/theme) ]] && \
    warn "No theme found" && theme="-"

! [ -f $REVEAL_PATH/js/reveal.js ] && err "$REVEAL_PATH/js/reveal.js not found"

! [ -f $REVEAL_PATH/lib/js/head.min.js ] && \
    warn "$REVEAL_PATH/lib/js/head.min.js not found, plugins won't be loaded" && \
    plugins="-"

! [ -d $REVEAL_PATH/plugin ] && warn "No plugin found" && plugins="-"

[ $n_err -gt 0 ] && fatal "Fix the above problem(s) and try again"

echo "Done checking."

# ==========================

# === START COPYING FILES ===

# Make directories

mkdir -p -- $dirname/js
mkdir $dirname/css

# Copy themes

[[ $theme != "-" ]] && mkdir $dirname/css/theme && case $theme in
    "*")
        cp $REVEAL_PATH/css/theme/*.css \
            $REVEAL_PATH/css/theme/source/*.scss $dirname/css/theme/
        ;;
    *)
        cp $REVEAL_PATH/css/theme/$theme.css $dirname/css/theme/$theme.css
        [ -f $REVEAL_PATH/css/theme/source/$theme.scss ] && \
            cp $REVEAL_PATH/css/theme/source/$theme.scss $dirname/css/theme/$theme.scss
        ;;
esac

# Copy plugins

[[ $plugins != "-" ]] && mkdir $dirname/plugin && for plugin in $plugins; do
    cp -r $REVEAL_PATH/plugin/$plugin $dirname/plugin/$plugin
done

# Copy js/ (supposedly contains reveal.js) and reveal.css

cp -r $REVEAL_PATH/js/* $dirname/js/
cp $REVEAL_PATH/css/reveal.css $dirname/css/reveal.css

# Copy lib/

[ -d $REVEAL_PATH/lib ] && cp -r $REVEAL_PATH/lib $dirname/lib

# Create index.html

touch $dirname/index.html
indexf="$dirname/index.html"

printf "<!DOCTYPE html>\n<html>\n$t<head>\n$t$t<meta charset=\"utf-8\">\n\
$t$t<meta name=\"viewport\" content=\"width=device-width\
, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n\n\
$t$t<title>$title</title>\n\n\
$t$t<link rel=\"stylesheet\" href=\"css/reveal.css\">\n" > $indexf

[[ $theme != "-" ]] && [[ $theme != "*" ]] && \
    printf "$t$t<link rel=\"stylesheet\" href=\"css/theme/$theme.css\">\n" >> $indexf

[ -f $dirname/lib/css/zenburn.css ] && \
printf \
"\n$t$t<!-- Theme used for syntax highlighting of code -->\n\
$t$t<link rel=\"stylesheet\" href=\"lib/css/zenburn.css\">\n" >> $indexf

[ -f $dirname/lib/js/html5shiv.js ] && \
printf \
"\n$t$t<!--[if lt IE 9]>\n$t$t$t<script src=\"lib/js/html5shiv.js\">\
</script>\n$t$t<![endif]-->\n" >> $indexf

printf "$t</head>\n$t<body>\n$t$t<div class=\"reveal\">\n$t$t$t<div class=\"slides\">\n" >> $indexf

[[ -n $header ]] && \
    printf "$t$t$t$t<section>\n$t$t$t$t$t<h1>$header</h1>\n$t$t$t$t</section>\n" >> $indexf

if [ $n_slide -gt 0 ]; then
    while [ $n_slide -ne 0 ]
    do
        printf "$t$t$t$t<section>\n$t$t$t$t</section>\n" >> $indexf
        n_slide=$(( $n_slide - 1))
    done
fi

printf "$t$t$t</div>\n$t$t</div>\n\n" >> $indexf

[ -f $dirname/lib/js/head.min.js ] && \
    printf "$t$t<script src=\"lib/js/head.min.js\"></script>\n" >> $indexf

printf "$t$t<script src=\"js/reveal.js\"></script>\n\n" >> $indexf

if [[ $plugins == "-" ]]
then
    printf "$t$t<script>\n$t$t$t\x52eveal.initialize();\n$t$t</script>\n" >> $indexf
else
    printf "$t$t<script>\n$t$t$t\x52eveal.initialize({\n$t$t$t$t\x64ependencies: [\n" >> $indexf
    for plugin in $plugins; do
        js_indexf=""

        # Guess plugin's index JavaScript file from the plugin's directory name

        posb_fname=("$plugin.js" "${plugin:0:${#plugin}-3}.js" "$plugin" "script.js" "index.js")

        for tfname in ${posb_fname[@]}
        do
            if [[ -f $dirname/plugin/$plugin/${tfname:0:${#tfname}-3}.min.js ]]
            then
                js_indexf=${tfname:0:${#tfname}-3}.min.js
                break
            elif [[ -f $dirname/plugin/$plugin/$tfname ]]
            then
                js_indexf=$tfname
                break
            fi
        done

        if [ -z $js_indexf ]; then
            warn "Failed to get plugin '$plugin''s JavaScript file to load from, please do this manually"
            continue
        fi

        printf "$t$t$t$t$t{ src: 'plugin/$plugin/$js_indexf' },\n" >> $indexf
    done
    printf "$t$t$t$t]\n$t$t$t});\n$t$t</script>\n" >> $indexf
fi

printf "$t</body>\n</html>\n" >> $indexf

echo "Generated a new slide deck at $dirname."

# ===========================
